package com.example.nagoyameshi.service;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.stripe.Stripe;
import com.stripe.exception.StripeException;
import com.stripe.model.Customer;
import com.stripe.model.PaymentMethod;
import com.stripe.model.checkout.Session;
import com.stripe.param.CustomerUpdateParams;
import com.stripe.param.PaymentMethodAttachParams;
import com.stripe.param.PaymentMethodCreateParams;
import com.stripe.param.checkout.SessionCreateParams;

import jakarta.annotation.PostConstruct;
import jakarta.servlet.http.HttpServletRequest;

@Service
public class StripeService {

	@Value("${stripe.api.key}")
	private String stripeApiKey;

	@Value("${stripe.price.id}")
	private String stripePriceId;

	@PostConstruct
	public void init() {
		// StripeのAPIキーを初期化
		Stripe.apiKey = stripeApiKey;
	}

	// サブスクリプション用のセッションを作成し、Stripeに必要な情報を返す
	public String createSubscriptionSession(HttpServletRequest request, String userEmail) {
		String baseUrl = getBaseUrl(request);
		if (baseUrl == null) {
			// ベースURLが取得できない場合のエラーハンドリング
			throw new IllegalStateException("Base URL cannot be determined.");
		}

		// Stripeのセッション作成
		SessionCreateParams params = SessionCreateParams.builder()
				.addPaymentMethodType(SessionCreateParams.PaymentMethodType.CARD)
				.addLineItem(
						SessionCreateParams.LineItem.builder()
								.setPrice(stripePriceId) // 事前にStripeで作成した価格IDを使用
								.setQuantity(1L)
								.build())
				.setMode(SessionCreateParams.Mode.SUBSCRIPTION) // サブスクリプションモードに設定
				.setSuccessUrl(baseUrl + "/subscription/success")
				.setCancelUrl(baseUrl + "/subscription/cancel")
				.setCustomerEmail(userEmail) // ユーザーのメールアドレスを設定
				.build();

		try {
			Session session = Session.create(params);
			return session.getUrl(); // セッションのURLを返す
		} catch (StripeException e) {
			e.printStackTrace();
			return null; // エラーハンドリングを強化
		}
	}

	// クレジットカード情報から PaymentMethod を作成するメソッド
	public String createPaymentMethod(String cardNumber, String expMonth, String expYear, String cvc)
			throws StripeException {
		PaymentMethodCreateParams.CardDetails cardDetails = PaymentMethodCreateParams.CardDetails.builder()
				.setNumber(cardNumber)
				.setExpMonth(Long.parseLong(expMonth))
				.setExpYear(Long.parseLong(expYear))
				.setCvc(cvc)
				.build();

		PaymentMethodCreateParams params = PaymentMethodCreateParams.builder()
				.setType(PaymentMethodCreateParams.Type.CARD)
				.setCard(cardDetails)
				.build();

		PaymentMethod paymentMethod = PaymentMethod.create(params);
		return paymentMethod.getId(); // PaymentMethod の ID を返す
	}

	// クレジットカード情報を更新するメソッド
	public void updateCustomerCreditCard(String customerId, String paymentMethodId) throws StripeException {
		// 顧客の情報を取得
		Customer customer = Customer.retrieve(customerId);

		// 支払い方法を顧客に紐付ける
		PaymentMethod paymentMethod = PaymentMethod.retrieve(paymentMethodId);
		PaymentMethodAttachParams attachParams = PaymentMethodAttachParams.builder()
				.setCustomer(customerId)
				.build();
		paymentMethod.attach(attachParams);

		// 顧客のデフォルト支払い方法を更新
		CustomerUpdateParams params = CustomerUpdateParams.builder()
				.setInvoiceSettings(
						CustomerUpdateParams.InvoiceSettings.builder()
								.setDefaultPaymentMethod(paymentMethodId)
								.build())
				.build();
		customer.update(params);
	}

	// リクエストからベースURLを取得するヘルパーメソッド
	private String getBaseUrl(HttpServletRequest request) {
		if (request == null) {
			return null; // Requestがnullの場合はnullを返す
		}
		String requestUrl = request.getRequestURL().toString();
		String servletPath = request.getServletPath();
		return requestUrl.replace(servletPath, "");
	}
}