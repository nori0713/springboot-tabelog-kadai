package com.example.nagoyameshi.service;

import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.stripe.Stripe;
import com.stripe.exception.StripeException;
import com.stripe.model.Customer;
import com.stripe.model.PaymentMethod;
import com.stripe.model.PaymentMethod.Card;
import com.stripe.model.PaymentMethodCollection;
import com.stripe.param.CustomerUpdateParams;
import com.stripe.param.PaymentMethodAttachParams;
import com.stripe.param.PaymentMethodCreateParams;
import com.stripe.param.PaymentMethodListParams;

import jakarta.annotation.PostConstruct;

@Service
public class StripeService {

    @Value("${stripe.api.key}")
    private String stripeApiKey;

    @Value("${stripe.price.id}")
    private String stripePriceId;

    @PostConstruct
    public void init() {
        // StripeのAPIキーを初期化
        Stripe.apiKey = stripeApiKey;
    }

    // クレジットカード情報を更新するメソッド
    public void updateCustomerCreditCard(String customerId, String paymentMethodId) throws StripeException {
        // 顧客IDがnullの場合のエラーハンドリング
        if (customerId == null || customerId.isEmpty()) {
            throw new IllegalArgumentException("顧客IDが無効です。");
        }

        // Stripe APIを使って顧客情報を取得
        Customer customer = Customer.retrieve(customerId);

        // 支払い方法を顧客に紐付ける
        PaymentMethod paymentMethod = PaymentMethod.retrieve(paymentMethodId);
        PaymentMethodAttachParams attachParams = PaymentMethodAttachParams.builder()
                .setCustomer(customerId)
                .build();
        paymentMethod.attach(attachParams);

        // 顧客のデフォルト支払い方法を更新
        CustomerUpdateParams params = CustomerUpdateParams.builder()
                .setInvoiceSettings(
                        CustomerUpdateParams.InvoiceSettings.builder()
                                .setDefaultPaymentMethod(paymentMethodId)
                                .build())
                .build();
        customer.update(params);
    }

    // クレジットカード情報を取得するメソッド
    public Map<String, String> getCreditCardInfo(String customerId) throws StripeException {
        // 顧客IDがnullまたは空の場合のエラーハンドリング
        if (customerId == null || customerId.isEmpty()) {
            throw new IllegalArgumentException("顧客IDが無効です。");
        }

        // Stripe APIを使って顧客のPaymentMethodを取得
        PaymentMethodCollection paymentMethods = PaymentMethod.list(
                PaymentMethodListParams.builder()
                        .setCustomer(customerId)
                        .setType(PaymentMethodListParams.Type.CARD)
                        .build());

        if (paymentMethods.getData().isEmpty()) {
            throw new IllegalStateException("クレジットカード情報が存在しません。");
        }

        // 最新のクレジットカード情報を取得
        PaymentMethod paymentMethod = paymentMethods.getData().get(0);
        Card card = paymentMethod.getCard();

        // 必要な情報をMapにして返す
        Map<String, String> cardInfo = new HashMap<>();
        cardInfo.put("number", "**** **** **** " + card.getLast4()); // カード番号の下4桁のみ表示
        cardInfo.put("expiry", card.getExpMonth() + "/" + card.getExpYear()); // 有効期限

        // デバッグ用のログ出力
        System.out.println("Retrieved card info: " + cardInfo);

        return cardInfo;
    }

    // クレジットカード情報から PaymentMethod を作成するメソッド
    public String createPaymentMethod(String cardNumber, String expMonth, String expYear, String cvc)
            throws StripeException {
        PaymentMethodCreateParams.CardDetails cardDetails = PaymentMethodCreateParams.CardDetails.builder()
                .setNumber(cardNumber)
                .setExpMonth(Long.parseLong(expMonth))
                .setExpYear(Long.parseLong(expYear))
                .setCvc(cvc)
                .build();

        PaymentMethodCreateParams params = PaymentMethodCreateParams.builder()
                .setType(PaymentMethodCreateParams.Type.CARD)
                .setCard(cardDetails)
                .build();

        PaymentMethod paymentMethod = PaymentMethod.create(params);
        return paymentMethod.getId(); // PaymentMethod の ID を返す
    }
}