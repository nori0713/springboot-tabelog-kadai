package com.example.nagoyameshi.service;

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.stripe.Stripe;
import com.stripe.exception.StripeException;
import com.stripe.model.Customer;
import com.stripe.model.CustomerCollection;
import com.stripe.model.PaymentMethod;
import com.stripe.model.PaymentMethod.Card;
import com.stripe.model.PaymentMethodCollection;
import com.stripe.model.checkout.Session;
import com.stripe.param.CustomerCreateParams;
import com.stripe.param.CustomerListParams;
import com.stripe.param.CustomerUpdateParams;
import com.stripe.param.PaymentMethodAttachParams;
import com.stripe.param.PaymentMethodListParams;
import com.stripe.param.checkout.SessionCreateParams;

import jakarta.annotation.PostConstruct;
import jakarta.servlet.http.HttpServletRequest;

@Service
public class StripeService {

	private static final Logger logger = LoggerFactory.getLogger(StripeService.class);

	@Value("${stripe.api.key}")
	private String stripeApiKey;

	@Value("${stripe.price.id}")
	private String stripePriceId;

	@PostConstruct
	public void init() {
		// StripeのAPIキーを初期化
		Stripe.apiKey = stripeApiKey;
	}

	// サブスクリプション用のセッションを作成し、Stripeに必要な情報を返す
	public String createSubscriptionSession(HttpServletRequest request, String userEmail) {
		// ベースURLの取得
		String baseUrl = getBaseUrl(request);
		if (baseUrl == null) {
			throw new IllegalStateException("Base URL cannot be determined.");
		}

		SessionCreateParams params = SessionCreateParams.builder()
				.addPaymentMethodType(SessionCreateParams.PaymentMethodType.CARD) // 支払い方法をクレジットカードに設定
				.addLineItem(SessionCreateParams.LineItem.builder()
						.setPrice(stripePriceId) // Stripeに定義された価格IDを使用
						.setQuantity(1L) // サブスクリプションの数量
						.build())
				.setMode(SessionCreateParams.Mode.SUBSCRIPTION) // サブスクリプションモードに設定
				.setSuccessUrl(baseUrl + "/subscription/success") // 成功時のリダイレクトURL
				.setCancelUrl(baseUrl + "/subscription/cancel") // キャンセル時のリダイレクトURL
				.setCustomerEmail(userEmail) // 顧客のメールアドレスを設定
				.build();

		try {
			Session session = Session.create(params);
			return session.getUrl(); // セッションのURLを返す
		} catch (StripeException e) {
			logger.error("Failed to create subscription session: ", e);
			return null;
		}
	}

	// 顧客を検索または作成するメソッド
	public String findOrCreateCustomerByEmail(String email) throws StripeException {
		CustomerListParams listParams = CustomerListParams.builder()
				.setEmail(email)
				.setLimit(1L)
				.build();

		CustomerCollection customers = Customer.list(listParams);

		if (!customers.getData().isEmpty()) {
			return customers.getData().get(0).getId(); // 既存の顧客が見つかった場合、その顧客IDを返す
		}

		CustomerCreateParams createParams = CustomerCreateParams.builder()
				.setEmail(email)
				.build();

		Customer customer = Customer.create(createParams);
		logger.info("Created new customer: {}", customer.getId());
		return customer.getId(); // 新しく作成された顧客のIDを返す
	}

	// クレジットカード情報を更新するメソッド
	public void updateCustomerCreditCard(String customerId, String paymentMethodId) throws StripeException {
		Customer customer = Customer.retrieve(customerId);

		PaymentMethod paymentMethod = PaymentMethod.retrieve(paymentMethodId);
		PaymentMethodAttachParams attachParams = PaymentMethodAttachParams.builder()
				.setCustomer(customerId)
				.build();
		paymentMethod.attach(attachParams);

		CustomerUpdateParams params = CustomerUpdateParams.builder()
				.setInvoiceSettings(
						CustomerUpdateParams.InvoiceSettings.builder()
								.setDefaultPaymentMethod(paymentMethodId)
								.build())
				.build();
		customer.update(params);
		logger.info("Updated default payment method for customer: {}", customerId);
	}

	// クレジットカード情報を取得するメソッド
	public Map<String, String> getCreditCardInfo(String customerId) throws StripeException {
		if (customerId == null || customerId.isEmpty()) {
			logger.error("顧客IDが無効です: {}", customerId);
			throw new IllegalArgumentException("顧客IDが無効です。");
		}

		logger.info("Retrieving credit card info for customer: {}", customerId);

		PaymentMethodCollection paymentMethods = PaymentMethod.list(
				PaymentMethodListParams.builder()
						.setCustomer(customerId)
						.setType(PaymentMethodListParams.Type.CARD)
						.build());

		// PaymentMethodリストの内容をログ出力
		logger.info("取得したPaymentMethodのリスト: {}", paymentMethods.getData());

		if (paymentMethods.getData().isEmpty()) {
			logger.warn("クレジットカード情報が見つかりません: {}", customerId);
			throw new IllegalStateException("クレジットカード情報が存在しません。");
		}

		// 最新のクレジットカード情報を取得
		PaymentMethod paymentMethod = paymentMethods.getData().get(0);
		PaymentMethod.Card card = paymentMethod.getCard();

		// 必要な情報をMapにして返す
		public Map<String, String> getCreditCardInfo(String customerId) throws StripeException {
		    // 顧客IDがnullまたは空の場合のエラーハンドリング
		    if (customerId == null || customerId.isEmpty()) {
		        logger.error("顧客IDが無効です: {}", customerId);
		        throw new IllegalArgumentException("顧客IDが無効です。");
		    }

		    // 顧客IDのログ出力
		    logger.info("顧客IDを使用してクレジットカード情報を取得します。顧客ID: {}", customerId);

		    // Stripe APIを使って顧客のPaymentMethodを取得
		    PaymentMethodCollection paymentMethods = PaymentMethod.list(
		            PaymentMethodListParams.builder()
		                    .setCustomer(customerId)
		                    .setType(PaymentMethodListParams.Type.CARD)
		                    .build());

		    // PaymentMethodリストの内容をログに出力
		    logger.info("取得したPaymentMethodのリストのサイズ: {}", paymentMethods.getData().size());

		    if (paymentMethods.getData().isEmpty()) {
		        logger.warn("クレジットカード情報が見つかりません: {}", customerId);
		        return null; // リストが空の場合、nullを返す
		    }

		    // 最新のクレジットカード情報を取得
		    PaymentMethod paymentMethod = paymentMethods.getData().get(0);
		    Card card = paymentMethod.getCard();

		    if (card == null) {
		        logger.error("カード情報がnullです: PaymentMethod ID: {}", paymentMethod.getId());
		        return null; // カード情報が取得できなかった場合
		    }

		    // 必要な情報をMapにして返す
		    Map<String, String> cardInfo = new HashMap<>();
		    cardInfo.put("number", "**** **** **** " + card.getLast4()); // カード番号の下4桁のみ表示
		    cardInfo.put("expiry", card.getExpMonth() + "/" + card.getExpYear()); // 有効期限

		    // デバッグ用のログ出力
		    logger.info("取得したカード情報: {}", cardInfo);

		    return cardInfo;
		}

	// 支払い方法を顧客に紐付けるメソッド
	public void attachPaymentMethodToCustomer(String customerEmail, String paymentMethodId) throws StripeException {
		PaymentMethod paymentMethod = PaymentMethod.retrieve(paymentMethodId);
		String customerId = findOrCreateCustomerByEmail(customerEmail);
		PaymentMethodAttachParams attachParams = PaymentMethodAttachParams.builder()
				.setCustomer(customerId)
				.build();
		paymentMethod.attach(attachParams);
		logger.info("Attached payment method {} to customer {}", paymentMethodId, customerId);
	}

	// リクエストからベースURLを取得するヘルパーメソッド
	private String getBaseUrl(HttpServletRequest request) {
		if (request == null) {
			logger.error("Request is null");
			return null;
		}
		String requestUrl = request.getRequestURL().toString();
		String servletPath = request.getServletPath();
		return requestUrl.replace(servletPath, "");
	}
}