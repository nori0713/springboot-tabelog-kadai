package com.example.nagoyameshi.service;

import java.time.LocalDate;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.nagoyameshi.entity.Reservation;
import com.example.nagoyameshi.entity.Restaurant;
import com.example.nagoyameshi.entity.User;
import com.example.nagoyameshi.form.ReservationRegisterForm;
import com.example.nagoyameshi.repository.ReservationRepository;
import com.example.nagoyameshi.repository.RestaurantRepository;
import com.example.nagoyameshi.repository.UserRepository;

import jakarta.servlet.http.HttpServletRequest;

@Service
public class ReservationService {
	private final ReservationRepository reservationRepository;
	private final RestaurantRepository restaurantRepository;
	private final UserRepository userRepository;
	private final StripeService stripeService;

	public ReservationService(ReservationRepository reservationRepository, RestaurantRepository restaurantRepository,
			UserRepository userRepository, StripeService stripeService) {
		this.reservationRepository = reservationRepository;
		this.restaurantRepository = restaurantRepository;
		this.userRepository = userRepository;
		this.stripeService = stripeService;
	}

	@Transactional
	public String createReservation(ReservationRegisterForm reservationRegisterForm, HttpServletRequest request) {
		// 予約日がnullでないことを確認
		if (reservationRegisterForm.getReservationDate() == null) {
			throw new IllegalArgumentException("予約日が指定されていません");
		}

		Restaurant restaurant = restaurantRepository.getReferenceById(reservationRegisterForm.getRestaurantId());
		User user = userRepository.getReferenceById(reservationRegisterForm.getUserId());
		LocalDate reservationDate = LocalDate.parse(reservationRegisterForm.getReservationDate());

		// 予約人数が0以下でないことを確認
		if (reservationRegisterForm.getNumberOfPeople() <= 0) {
			throw new IllegalArgumentException("予約人数は1以上である必要があります");
		}

		// 有料会員かどうかをチェック
		if (!"PREMIUM".equals(user.getRole().getName())) {
			String baseUrl = stripeService.getBaseUrl(request);
			// プレミアム会員でない場合、Stripe決済ページのURLを返す
			return stripeService.createSubscriptionSession(baseUrl, user.getEmail());
		}

		// プレミアム会員の場合、予約を作成
		Reservation reservation = new Reservation();
		reservation.setRestaurant(restaurant);
		reservation.setUser(user);
		reservation.setReservationDate(reservationDate);
		reservation.setNumberOfPeople(reservationRegisterForm.getNumberOfPeople());

		reservationRepository.save(reservation);
		return null; // 予約が完了した場合はnullを返す
	}

	// 予約人数が定員以下かどうかをチェックする
	public boolean isWithinCapacity(Integer numberOfPeople, Integer capacity) {
		return numberOfPeople <= capacity;
	}

	// ユーザーに関連する予約を取得するメソッド
	public Page<Reservation> getReservationsForUser(User user, Pageable pageable) {
		return reservationRepository.findByUserOrderByReservationDateDesc(user, pageable);
	}
}