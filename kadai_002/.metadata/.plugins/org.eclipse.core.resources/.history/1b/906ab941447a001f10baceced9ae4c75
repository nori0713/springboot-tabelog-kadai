package com.example.nagoyameshi.controller;

import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.web.PageableDefault;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.example.nagoyameshi.entity.Category;
import com.example.nagoyameshi.entity.Restaurant;
import com.example.nagoyameshi.entity.Review;
import com.example.nagoyameshi.entity.User;
import com.example.nagoyameshi.form.ReservationInputForm;
import com.example.nagoyameshi.repository.CategoryRepository;
import com.example.nagoyameshi.repository.RestaurantRepository;
import com.example.nagoyameshi.repository.ReviewRepository;
import com.example.nagoyameshi.security.UserDetailsImpl;
import com.example.nagoyameshi.service.FavoriteService;

@Controller
public class RestaurantController {

    private static final Logger logger = LoggerFactory.getLogger(RestaurantController.class);

    private final RestaurantRepository restaurantRepository;
    private final ReviewRepository reviewRepository;
    private final FavoriteService favoriteService;
    private final CategoryRepository categoryRepository;

    public RestaurantController(RestaurantRepository restaurantRepository,
                                ReviewRepository reviewRepository,
                                FavoriteService favoriteService,
                                CategoryRepository categoryRepository) {
        this.restaurantRepository = restaurantRepository;
        this.reviewRepository = reviewRepository;
        this.favoriteService = favoriteService;
        this.categoryRepository = categoryRepository;
    }

    // 飲食店一覧を表示するためのメソッド
    @GetMapping("/restaurants")
    public String listRestaurants(@RequestParam(name = "keyword", required = false) String keyword,
                                  @RequestParam(name = "category", required = false) Integer categoryId,
                                  @RequestParam(name = "minPrice", required = false) Integer minPrice,
                                  @RequestParam(name = "maxPrice", required = false) Integer maxPrice,
                                  @RequestParam(name = "capacity", required = false) Integer capacity,
                                  @RequestParam(name = "order", required = false, defaultValue = "createdAtDesc") String order,
                                  Model model,
                                  @PageableDefault(size = 10, sort = "name", direction = Sort.Direction.ASC) Pageable pageable) {

        // カテゴリデータを取得してモデルに追加
        List<Category> categories = categoryRepository.findAll();
        model.addAttribute("categories", categories);
        model.addAttribute("categoryId", categoryId);
        model.addAttribute("minPrice", minPrice);
        model.addAttribute("maxPrice", maxPrice);
        model.addAttribute("capacity", capacity);
        model.addAttribute("keyword", keyword);
        model.addAttribute("order", order);

        Page<Restaurant> restaurantPage;

        // キーワード検索がある場合
        if (keyword != null && !keyword.isEmpty()) {
            restaurantPage = restaurantRepository.findByNameLike("%" + keyword + "%", pageable);
        } 
        // カテゴリ、価格、予約人数、並び替えの検索条件をチェック
        else if (categoryId != null && categoryId > 0) {
            if (minPrice != null && maxPrice != null && capacity != null) {
                restaurantPage = restaurantRepository.findByCategoryIdAndPriceBetweenAndCapacityGreaterThanEqual(
                        categoryId, minPrice, maxPrice, capacity, pageable);
            } else if (minPrice != null && maxPrice != null) {
                restaurantPage = restaurantRepository.findByCategoryIdAndPriceBetween(categoryId, minPrice, maxPrice, pageable);
            } else if (capacity != null) {
                restaurantPage = restaurantRepository.findByCategoryIdAndCapacityGreaterThanEqual(categoryId, capacity, pageable);
            } else {
                restaurantPage = restaurantRepository.findByCategoryId(categoryId, pageable);
            }
        } 
        // 10000円以上のレストランを表示
        else if (minPrice != null && maxPrice == null && minPrice == 10000) {
            restaurantPage = restaurantRepository.findByPriceGreaterThanEqual(minPrice, pageable);
        } 
        // 価格範囲検索
        else if (minPrice != null && maxPrice != null && capacity != null) {
            restaurantPage = restaurantRepository.findByPriceBetweenAndCapacityGreaterThanEqual(minPrice, maxPrice, capacity, pageable);
        } else if (minPrice != null && maxPrice != null) {
            restaurantPage = restaurantRepository.findByPriceBetween(minPrice, maxPrice, pageable);
        } else if (capacity != null) {
            restaurantPage = restaurantRepository.findByCapacityGreaterThanEqual(capacity, pageable);
        } else {
            // 並び替え処理
            if ("priceAsc".equals(order)) {
                restaurantPage = restaurantRepository.findAllByOrderByPriceAsc(pageable);
            } else if ("nameAsc".equals(order)) {
                restaurantPage = restaurantRepository.findAllByOrderByNameAsc(pageable);
            } else if ("capacityDesc".equals(order)) {
                restaurantPage = restaurantRepository.findAllByOrderByCapacityDesc(pageable);
            } else {
                // デフォルト: 新着順
                restaurantPage = restaurantRepository.findAllByOrderByCreatedAtDesc(pageable);
            }
        }

        model.addAttribute("restaurantPage", restaurantPage);
        return "restaurants/index";
    }

    @GetMapping("/restaurants/{id}")
    public String show(@PathVariable("id") Integer id,
                       @AuthenticationPrincipal UserDetailsImpl userDetailsImpl,
                       Model model, RedirectAttributes redirectAttributes) {

        // レストラン取得
        Optional<Restaurant> optionalRestaurant = restaurantRepository.findById(id);
        if (optionalRestaurant.isEmpty()) {
            redirectAttributes.addFlashAttribute("errorMessage", "指定されたレストランが見つかりませんでした。");
            return "redirect:/restaurants";
        }

        Restaurant restaurant = optionalRestaurant.get();
        model.addAttribute("restaurant", restaurant);

        // 営業時間のフォーマット
        DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm");
        String formattedOpeningTime = restaurant.getOpeningTime() != null
                ? restaurant.getOpeningTime().format(timeFormatter)
                : "未定";
        String formattedClosingTime = restaurant.getClosingTime() != null
                ? restaurant.getClosingTime().format(timeFormatter)
                : "未定";
        model.addAttribute("formattedOpeningTime", formattedOpeningTime);
        model.addAttribute("formattedClosingTime", formattedClosingTime);

        // レビューの取得
        List<Review> reviews = reviewRepository.findAllByRestaurantOrderByCreatedAtDesc(restaurant);
        model.addAttribute("reviews", reviews);

        // レビューのユーザー情報チェック
        reviews.forEach(review -> {
            if (review.getUser() == null) {
                logger.warn("Review does not have an associated user. Review ID: " + review.getId());
            }
        });

        // ログインユーザーの確認とお気に入り状態の取得
        User user = (userDetailsImpl != null) ? userDetailsImpl.getUser() : null;
        boolean isFavorite = (user != null) && favoriteService.isFavorite(restaurant, user);
        model.addAttribute("isFavorite", isFavorite);

        // 既にレビューを投稿済みか確認
        if (user != null) {
            boolean hasReviewed = reviews.stream()
                    .anyMatch(review -> review.getUser() != null && review.getUser().getId().equals(user.getId()));
            model.addAttribute("hasReviewed", hasReviewed);
        } else {
            model.addAttribute("hasReviewed", false);
        }

        // 予約フォームの準備
        model.addAttribute("reservationInputForm", new ReservationInputForm());

        return "restaurants/show";
    }
}