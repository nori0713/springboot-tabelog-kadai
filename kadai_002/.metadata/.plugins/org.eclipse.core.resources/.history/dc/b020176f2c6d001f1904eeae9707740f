package com.example.nagoyameshi.controller;

import java.time.LocalDate;
import java.time.LocalTime;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.example.nagoyameshi.entity.Reservation;
import com.example.nagoyameshi.entity.Restaurant;
import com.example.nagoyameshi.entity.User;
import com.example.nagoyameshi.form.ReservationInputForm;
import com.example.nagoyameshi.form.ReservationRegisterForm;
import com.example.nagoyameshi.repository.RestaurantRepository;
import com.example.nagoyameshi.security.UserDetailsImpl;
import com.example.nagoyameshi.service.ReservationService;
import com.example.nagoyameshi.service.UserService;

import jakarta.servlet.http.HttpServletRequest;

@Controller
public class ReservationController {

    private final RestaurantRepository restaurantRepository;
    private final ReservationService reservationService;
    private final UserService userService;

    @Autowired
    public ReservationController(RestaurantRepository restaurantRepository,
                                 ReservationService reservationService,
                                 UserService userService) {
        this.restaurantRepository = restaurantRepository;
        this.reservationService = reservationService;
        this.userService = userService;
    }

    @GetMapping("/restaurants/{id}/reservations/input")
    public String input(@PathVariable(name = "id") Integer id,
                        @ModelAttribute @Validated ReservationInputForm reservationInputForm,
                        BindingResult bindingResult,
                        RedirectAttributes redirectAttributes,
                        Model model,
                        @AuthenticationPrincipal UserDetailsImpl userDetailsImpl,
                        HttpServletRequest request) {
        Restaurant restaurant = restaurantRepository.getReferenceById(id);
        User user = userDetailsImpl.getUser();

        // プレミアム会員でない場合は決済ページへリダイレクト
        if (!"ROLE_PREMIUM".equals(user.getRole().getName())) {
            String sessionUrl = userService.createSubscriptionSession(request, user.getEmail());
            return "redirect:" + sessionUrl;
        }

        // 予約人数のバリデーション
        Integer numberOfPeople = reservationInputForm.getNumberOfPeople();
        Integer capacity = restaurant.getCapacity();
        if (numberOfPeople != null && !reservationService.isWithinCapacity(numberOfPeople, capacity)) {
            FieldError fieldError = new FieldError(bindingResult.getObjectName(), "numberOfPeople",
                    "予約人数が定員を超えています。");
            bindingResult.addError(fieldError);
        }

        // 予約時間が営業時間内かどうかのバリデーション
        LocalTime reservationTime = reservationInputForm.getReservationTime();
        if (reservationTime != null) {
            if (restaurant.getOpeningTime().isAfter(reservationTime) || restaurant.getClosingTime().isBefore(reservationTime)) {
                FieldError fieldError = new FieldError(bindingResult.getObjectName(), "reservationTime",
                        "営業時間外の時間が選択されています。");
                bindingResult.addError(fieldError);
            }
        }

        if (bindingResult.hasErrors()) {
            model.addAttribute("restaurant", restaurant);
            model.addAttribute("errorMessage", "予約内容に不備があります。");
            return "restaurants/show";
        }

        redirectAttributes.addFlashAttribute("reservationInputForm", reservationInputForm);
        return "redirect:/restaurants/{id}/reservations/confirm";
    }

    @GetMapping("/restaurants/{id}/reservations/confirm")
    public String confirm(@PathVariable(name = "id") Integer id,
                          @ModelAttribute ReservationInputForm reservationInputForm,
                          @AuthenticationPrincipal UserDetailsImpl userDetailsImpl,
                          Model model) {
        Restaurant restaurant = restaurantRepository.getReferenceById(id);
        User user = userDetailsImpl.getUser();

        LocalDate reservationDate = reservationInputForm.getReservationDate();
        LocalTime reservationTime = reservationInputForm.getReservationTime();
        if (reservationDate == null || reservationTime == null) {
            model.addAttribute("errorMessage", "予約日または時間が選択されていません。");
            return "redirect:/restaurants/" + id + "/reservations/input";
        }

        ReservationRegisterForm reservationRegisterForm = new ReservationRegisterForm(
                restaurant.getId(), user.getId(), reservationDate.toString(), reservationTime.toString(), reservationInputForm.getNumberOfPeople());

        model.addAttribute("restaurant", restaurant);
        model.addAttribute("reservationRegisterForm", reservationRegisterForm);

        return "reservations/confirm";
    }

    @PostMapping("/restaurants/{id}/reservations/create")
    public String create(@ModelAttribute ReservationRegisterForm reservationRegisterForm,
                         @AuthenticationPrincipal UserDetailsImpl userDetailsImpl,
                         HttpServletRequest request) {
        User user = userDetailsImpl.getUser();

        // プレミアム会員のみ予約可能
        if ("ROLE_PREMIUM".equals(user.getRole().getName())) {
            reservationService.create(reservationRegisterForm);
            return "redirect:/reservations?reserved"; // 予約確定後、予約一覧ページにリダイレクト
        }

        // 無料会員は決済ページへリダイレクト
        String sessionUrl = userService.createSubscriptionSession(request, user.getEmail());
        return "redirect:" + sessionUrl;
    }

    @GetMapping("/reservations")
    public String getReservations(Model model, @AuthenticationPrincipal UserDetailsImpl userDetails,
                                  Pageable pageable) {
        User user = userDetails.getUser();
        Page<Reservation> reservationPage = reservationService.getReservationsForUser(user, pageable);

        model.addAttribute("reservationPage", reservationPage);

        return "reservations/index";
    }
}