package com.example.nagoyameshi.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.example.nagoyameshi.entity.User;
import com.example.nagoyameshi.event.SignupEventPublisher;
import com.example.nagoyameshi.form.SignupForm;
import com.example.nagoyameshi.service.UserService;
import com.example.nagoyameshi.service.VerificationTokenService;

import jakarta.servlet.http.HttpServletRequest;

@Controller
public class AuthController {
	private final UserService userService;
	private final SignupEventPublisher signupEventPublisher;
	private final VerificationTokenService verificationTokenService;

	public AuthController(UserService userService, SignupEventPublisher signupEventPublisher,
			VerificationTokenService verificationTokenService) {
		this.userService = userService;
		this.signupEventPublisher = signupEventPublisher;
		this.verificationTokenService = verificationTokenService;
	}

	@GetMapping("/signup")
	public String signup(Model model) {
		model.addAttribute("signupForm", new SignupForm());
		return "auth/signup";
	}

	@PostMapping("/signup")
	public String signup(@ModelAttribute @Validated SignupForm signupForm, BindingResult bindingResult,
			RedirectAttributes redirectAttributes, HttpServletRequest request, Model model) {
		// パスワードと確認用パスワードの一致をチェック
		if (!signupForm.getPassword().equals(signupForm.getPasswordConfirmation())) {
			FieldError passwordError = new FieldError(bindingResult.getObjectName(), "passwordConfirmation",
					"パスワードが一致しません。");
			bindingResult.addError(passwordError);
		}

		// メールアドレスが既に登録されているかどうかをチェック
		if (userService.isEmailRegistered(signupForm.getEmail())) {
			FieldError emailError = new FieldError(bindingResult.getObjectName(), "email", "このメールアドレスは既に登録されています。");
			bindingResult.addError(emailError);
		}

		if (bindingResult.hasErrors()) {
			return "auth/signup";
		}

		// ユーザー作成
		User createdUser = userService.create(signupForm);

		// プレミアム会員を選択した場合は、決済ページにリダイレクト
		if (signupForm.isPremiumSelected()) {
			String sessionUrl = userService.createSubscriptionSession(request, createdUser.getEmail());
			return "redirect:" + sessionUrl;
		}

		// 通常の無料会員の場合、サインアップ成功メッセージを表示
		String requestUrl = new String(request.getRequestURL());
		signupEventPublisher.publishSignupEvent(createdUser, requestUrl);
		redirectAttributes.addFlashAttribute("successMessage",
				"ご入力いただいたメールアドレスに認証メールを送信しました。メールに記載されているリンクをクリックし、会員登録を完了してください。");

		return "redirect:/login";
	}
}