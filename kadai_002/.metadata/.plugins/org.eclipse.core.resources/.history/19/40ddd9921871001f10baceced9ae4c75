package com.example.nagoyameshi.controller;

import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Optional;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.web.PageableDefault;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.example.nagoyameshi.entity.Category;
import com.example.nagoyameshi.entity.Restaurant;
import com.example.nagoyameshi.entity.Review;
import com.example.nagoyameshi.entity.User;
import com.example.nagoyameshi.form.ReservationInputForm;
import com.example.nagoyameshi.repository.CategoryRepository;
import com.example.nagoyameshi.repository.RestaurantRepository;
import com.example.nagoyameshi.repository.ReviewRepository;
import com.example.nagoyameshi.security.UserDetailsImpl;
import com.example.nagoyameshi.service.FavoriteService;

@Controller
public class RestaurantController {

	private final RestaurantRepository restaurantRepository;
	private final ReviewRepository reviewRepository;
	private final FavoriteService favoriteService;
	private final CategoryRepository categoryRepository; // CategoryRepositoryを追加

	public RestaurantController(RestaurantRepository restaurantRepository,
			ReviewRepository reviewRepository,
			FavoriteService favoriteService,
			CategoryRepository categoryRepository) {
		this.restaurantRepository = restaurantRepository;
		this.reviewRepository = reviewRepository;
		this.favoriteService = favoriteService;
		this.categoryRepository = categoryRepository;
	}

	// 飲食店一覧を表示するためのメソッド
	@GetMapping("/restaurants")
	public String listRestaurants(@RequestParam(name = "category", required = false) Integer categoryId,
	                              @RequestParam(name = "price", required = false) Integer price,
	                              @RequestParam(name = "capacity", required = false) Integer capacity, // 予約人数パラメータを追加
	                              Model model,
	                              @PageableDefault(size = 10, sort = "name", direction = Sort.Direction.ASC) Pageable pageable) {
	    // カテゴリデータを取得してモデルに追加
	    List<Category> categories = categoryRepository.findAll();
	    model.addAttribute("categories", categories);
	    model.addAttribute("categoryId", categoryId);
	    model.addAttribute("price", price); // 価格帯パラメータをモデルに追加
	    model.addAttribute("capacity", capacity); // 予約人数パラメータをモデルに追加

	    // ページネーション付きで飲食店を取得
	    Page<Restaurant> restaurantPage;

	    if (categoryId != null && categoryId > 0) {
	        // カテゴリでフィルタリングしてレストランを取得
	        restaurantPage = restaurantRepository.findByCategoryId(categoryId, pageable);
	    } else if (price != null && capacity != null) {
	        // 価格帯と予約人数でフィルタリング
	        restaurantPage = restaurantRepository.findByPriceLessThanEqualAndCapacityGreaterThanEqual(price, capacity, pageable);
	    } else if (price != null) {
	        // 価格帯でフィルタリング
	        restaurantPage = restaurantRepository.findByPriceLessThanEqual(price, pageable);
	    } else {
	        // すべてのレストランを取得
	        restaurantPage = restaurantRepository.findAll(pageable);
	    }

	    model.addAttribute("restaurantPage", restaurantPage);
	    return "restaurants/index";
	}

	@GetMapping("/restaurants/{id}")
	public String show(@PathVariable("id") Integer id,
			@AuthenticationPrincipal UserDetailsImpl userDetailsImpl,
			Model model, RedirectAttributes redirectAttributes) {

		// レストラン取得
		Optional<Restaurant> optionalRestaurant = restaurantRepository.findById(id);
		if (optionalRestaurant.isEmpty()) {
			redirectAttributes.addFlashAttribute("errorMessage", "指定されたレストランが見つかりませんでした。");
			return "redirect:/restaurants";
		}

		Restaurant restaurant = optionalRestaurant.get();
		model.addAttribute("restaurant", restaurant);

		// 営業時間のフォーマット
		DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm");
		String formattedOpeningTime = restaurant.getOpeningTime() != null
				? restaurant.getOpeningTime().format(timeFormatter)
				: "未定";
		String formattedClosingTime = restaurant.getClosingTime() != null
				? restaurant.getClosingTime().format(timeFormatter)
				: "未定";
		model.addAttribute("formattedOpeningTime", formattedOpeningTime);
		model.addAttribute("formattedClosingTime", formattedClosingTime);

		// レビューの取得
		List<Review> reviews = reviewRepository.findAllByRestaurantOrderByCreatedAtDesc(restaurant);
		model.addAttribute("reviews", reviews);

		// ログインユーザーの確認とお気に入り状態の取得
		User user = (userDetailsImpl != null) ? userDetailsImpl.getUser() : null;
		boolean isFavorite = (user != null) && favoriteService.isFavorite(restaurant, user);
		model.addAttribute("isFavorite", isFavorite);

		// 既にレビューを投稿済みか確認
		if (user != null) {
			boolean hasReviewed = reviews.stream().anyMatch(review -> review.getUser().getId().equals(user.getId()));
			model.addAttribute("hasReviewed", hasReviewed);
		} else {
			model.addAttribute("hasReviewed", false);
		}

		// 予約フォームの準備
		model.addAttribute("reservationInputForm", new ReservationInputForm());

		return "restaurants/show";
	}
}