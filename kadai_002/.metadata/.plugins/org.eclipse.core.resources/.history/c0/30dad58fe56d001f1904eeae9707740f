package com.example.nagoyameshi.controller;

import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.example.nagoyameshi.entity.Reservation;
import com.example.nagoyameshi.entity.Restaurant;
import com.example.nagoyameshi.entity.User;
import com.example.nagoyameshi.form.ReservationInputForm;
import com.example.nagoyameshi.form.ReservationRegisterForm;
import com.example.nagoyameshi.repository.RestaurantRepository;
import com.example.nagoyameshi.security.UserDetailsImpl;
import com.example.nagoyameshi.service.ReservationService;
import com.example.nagoyameshi.service.UserService;

@Controller
public class ReservationController {

	private final RestaurantRepository restaurantRepository;
	private final ReservationService reservationService;
	private final UserService userService;

	public ReservationController(RestaurantRepository restaurantRepository, ReservationService reservationService,
			UserService userService) {
		this.restaurantRepository = restaurantRepository;
		this.reservationService = reservationService;
		this.userService = userService;
	}

	@GetMapping("/restaurants/{id}/reservations/input")
	public String input(@PathVariable(name = "id") Integer id, Model model,
			@AuthenticationPrincipal UserDetailsImpl userDetailsImpl) {
		Restaurant restaurant = restaurantRepository.getReferenceById(id);
		User user = userDetailsImpl.getUser();

		// 予約可能な時間リストを生成してモデルに追加
		List<LocalTime> availableTimes = getAvailableTimes(restaurant.getOpeningTime(), restaurant.getClosingTime());
		model.addAttribute("availableTimes", availableTimes);

		// 営業時間をビューに渡す
		model.addAttribute("openingTime", restaurant.getOpeningTime().toString());
		model.addAttribute("closingTime", restaurant.getClosingTime().toString());

		// 予約フォームとレストラン、ユーザー情報をモデルに追加
		model.addAttribute("reservationInputForm", new ReservationInputForm());
		model.addAttribute("restaurant", restaurant);
		model.addAttribute("user", user);

		return "reservations/show"; // 予約フォームを表示
	}

	// 営業時間内の予約可能な時間を生成
	private List<LocalTime> getAvailableTimes(LocalTime openingTime, LocalTime closingTime) {
		List<LocalTime> times = new ArrayList<>();

		// 営業時間がnullでないか確認
		if (openingTime == null || closingTime == null) {
			System.out.println("Opening or closing time is null");
			return times;
		}

		LocalTime time = openingTime;
		while (time.isBefore(closingTime) || time.equals(closingTime)) {
			times.add(time);
			time = time.plusHours(1); // 1時間刻みで追加
		}
		return times;
	}

	@PostMapping("/restaurants/{id}/reservations/input")
	public String handleReservationInput(@PathVariable(name = "id") Integer id,
			@ModelAttribute("reservationInputForm") @Validated ReservationInputForm reservationInputForm,
			BindingResult bindingResult, Model model,
			RedirectAttributes redirectAttributes,
			@AuthenticationPrincipal UserDetailsImpl userDetailsImpl) {
		Restaurant restaurant = restaurantRepository.getReferenceById(id);
		User user = userDetailsImpl.getUser();

		// 予約時間がnullでないか確認
		LocalTime reservationTime = reservationInputForm.getReservationTime();
		if (reservationTime == null) {
			bindingResult.addError(new FieldError("reservationInputForm", "reservationTime",
					"予約時間を選択してください。"));
		} else if (!reservationService.isWithinBusinessHours(reservationTime, restaurant.getOpeningTime(),
				restaurant.getClosingTime())) {
			bindingResult.addError(new FieldError("reservationInputForm", "reservationTime",
					"予約時間は営業時間内に設定してください。"));
		}

		// 予約人数が空欄か、最大人数を超えていないかチェック
		if (reservationInputForm.getNumberOfPeople() == null) {
			bindingResult.addError(new FieldError("reservationInputForm", "numberOfPeople",
					"予約人数を入力してください。"));
		} else if (reservationInputForm.getNumberOfPeople() > restaurant.getCapacity()) {
			bindingResult.addError(new FieldError("reservationInputForm", "numberOfPeople",
					"予約最大人数より少ない人数を入力してください。"));
		}

		// エラーがある場合は元のページに戻す
		if (bindingResult.hasErrors()) {
			model.addAttribute("restaurant", restaurant);
			model.addAttribute("availableTimes",
					getAvailableTimes(restaurant.getOpeningTime(), restaurant.getClosingTime()));
			return "restaurants/show"; // エラーを表示して元のページに戻す
		}

		// 確認ページにリダイレクト
		redirectAttributes.addFlashAttribute("reservationInputForm", reservationInputForm);
		return "redirect:/restaurants/" + id + "/reservations/confirm";
	}

	@GetMapping("/restaurants/{id}/reservations/confirm")
	public String confirmReservation(@PathVariable(name = "id") Integer id,
			@ModelAttribute ReservationInputForm reservationInputForm,
			@AuthenticationPrincipal UserDetailsImpl userDetailsImpl,
			Model model) {
		Restaurant restaurant = restaurantRepository.getReferenceById(id);
		User user = userDetailsImpl.getUser();

		if (reservationInputForm.getReservationDate() == null || reservationInputForm.getReservationTime() == null) {
			model.addAttribute("errorMessage", "予約日または予約時間が未選択です。");
			return "redirect:/restaurants/" + id + "/reservations/input";
		}

		ReservationRegisterForm reservationRegisterForm = new ReservationRegisterForm(
				restaurant.getId(),
				user.getId(),
				reservationInputForm.getReservationDate().toString(),
				reservationInputForm.getReservationTime().toString(),
				reservationInputForm.getNumberOfPeople());

		model.addAttribute("restaurant", restaurant);
		model.addAttribute("reservationRegisterForm", reservationRegisterForm);

		return "reservations/confirm"; // 確認ページを表示
	}

	@PostMapping("/restaurants/{id}/reservations/create")
	public String createReservation(@ModelAttribute ReservationRegisterForm reservationRegisterForm,
			@AuthenticationPrincipal UserDetailsImpl userDetailsImpl) {
		User user = userDetailsImpl.getUser();

		// 有料会員のみが予約可能
		if ("ROLE_PREMIUM".equals(user.getRole().getName())) {
			reservationService.create(reservationRegisterForm);
			return "redirect:/reservations?reserved"; // 予約確定後にリダイレクト
		}

		// 無料会員は決済ページにリダイレクト
		String sessionUrl = userService.createSubscriptionSession(null, user.getEmail());
		return "redirect:" + sessionUrl;
	}

	// 予約一覧を表示するエンドポイントを追加
	@GetMapping("/reservations")
	public String getReservations(Model model,
			@RequestParam(value = "page", defaultValue = "0") int page,
			@RequestParam(value = "reserved", required = false) String reserved,
			@AuthenticationPrincipal UserDetailsImpl userDetailsImpl) {
		User user = userDetailsImpl.getUser();

		// ログインユーザーの予約一覧を取得
		Page<Reservation> reservationPage = reservationService.getReservationsForUser(user, PageRequest.of(page, 10));

		model.addAttribute("reservationPage", reservationPage);

		// 予約完了のメッセージを表示
		if (reserved != null) {
			model.addAttribute("reserved", true);
		}

		return "reservations/index"; // 予約一覧ページのテンプレート名は`index`
	}
}