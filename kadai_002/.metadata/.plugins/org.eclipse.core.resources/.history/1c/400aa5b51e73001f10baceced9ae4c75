package com.example.nagoyameshi.controller;

import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.example.nagoyameshi.entity.User;
import com.example.nagoyameshi.form.UserEditForm;
import com.example.nagoyameshi.repository.UserRepository;
import com.example.nagoyameshi.security.UserDetailsImpl;
import com.example.nagoyameshi.service.StripeService;
import com.example.nagoyameshi.service.UserService;

import jakarta.servlet.http.HttpServletRequest;

@Controller
@RequestMapping("/user")
public class UserController {
	private final UserRepository userRepository;
	private final UserService userService;
	private final StripeService stripeService;

	@Autowired
	public UserController(UserRepository userRepository, UserService userService, StripeService stripeService) {
		this.userRepository = userRepository;
		this.userService = userService;
		this.stripeService = stripeService;
	}

	@GetMapping
	public String index(@AuthenticationPrincipal UserDetailsImpl userDetailsImpl, Model model) {
		User user = userRepository.getReferenceById(userDetailsImpl.getUser().getId());
		model.addAttribute("user", user);
		return "user/index";
	}

	@GetMapping("/edit")
	public String edit(@AuthenticationPrincipal UserDetailsImpl userDetailsImpl, Model model) {
		User user = userRepository.getReferenceById(userDetailsImpl.getUser().getId());
		UserEditForm userEditForm = new UserEditForm(user.getId(), user.getName(), user.getFurigana(),
				user.getPostalCode(), user.getAddress(), user.getPhoneNumber(), user.getEmail());

		model.addAttribute("userEditForm", userEditForm);
		return "user/edit";
	}

	@PostMapping("/update")
	public String update(@ModelAttribute @Validated UserEditForm userEditForm, BindingResult bindingResult,
			RedirectAttributes redirectAttributes) {
		if (userService.isEmailChanged(userEditForm) && userService.isEmailRegistered(userEditForm.getEmail())) {
			FieldError fieldError = new FieldError(bindingResult.getObjectName(), "email", "すでに登録済みのメールアドレスです。");
			bindingResult.addError(fieldError);
		}

		if (bindingResult.hasErrors()) {
			return "user/edit";
		}

		userService.update(userEditForm);
		redirectAttributes.addFlashAttribute("successMessage", "会員情報を編集しました。");
		return "redirect:/user";
	}

	@PostMapping("/subscribe")
	public String subscribeToPremium(@AuthenticationPrincipal UserDetailsImpl userDetailsImpl,
			HttpServletRequest request) {
		User user = userRepository.getReferenceById(userDetailsImpl.getUser().getId());
		String checkoutUrl = stripeService.createSubscriptionSession(request, user.getEmail());
		return "redirect:" + checkoutUrl;
	}

	@GetMapping("/update-card")
	public String showUpdateCardForm(Model model) {
		return "user/update-card"; // クレジットカード情報の更新フォームページ
	}

	@PostMapping("/update-card")
	public String updateCreditCard(@RequestBody Map<String, String> payload,
			@AuthenticationPrincipal UserDetailsImpl userDetailsImpl,
			RedirectAttributes redirectAttributes) {
		try {
			String paymentMethodId = payload.get("paymentMethodId");
			User user = userDetailsImpl.getUser();

			// クレジットカード情報の更新
			userService.updateCreditCard(user.getId(), paymentMethodId);

			redirectAttributes.addFlashAttribute("successMessage", "クレジットカード情報が更新されました。");
			return "redirect:/user";
		} catch (Exception e) {
			redirectAttributes.addFlashAttribute("errorMessage", "カード情報の更新に失敗しました。");
			return "redirect:/user/update-card";
		}
	}

	@GetMapping("/user")
	public String showUserProfile(@AuthenticationPrincipal UserDetailsImpl userDetailsImpl, Model model) {
		User user = userDetailsImpl.getUser();
		model.addAttribute("user", user);

		// 有料会員の場合にクレジットカード情報を取得して表示
		if (user.isPremiumMember()) {
			try {
				// Stripe APIを使って顧客のPaymentMethodを取得
				String customerId = user.getStripeCustomerId(); // Stripeに登録された顧客ID
				Map<String, String> cardInfo = stripeService.getCreditCardInfo(customerId); // カード情報取得
				model.addAttribute("cardInfo", cardInfo);
			} catch (Exception e) {
				model.addAttribute("errorMessage", "クレジットカード情報の取得に失敗しました。");
			}
		}

		return "user/index";
	}
}