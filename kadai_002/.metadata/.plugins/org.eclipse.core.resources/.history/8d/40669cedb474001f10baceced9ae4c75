package com.example.nagoyameshi.controller;

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.example.nagoyameshi.entity.User;
import com.example.nagoyameshi.form.UserEditForm;
import com.example.nagoyameshi.repository.UserRepository;
import com.example.nagoyameshi.security.UserDetailsImpl;
import com.example.nagoyameshi.service.StripeService;
import com.example.nagoyameshi.service.UserService;

import jakarta.servlet.http.HttpServletRequest;

@Controller
@RequestMapping("/user")
public class UserController {
	private final UserRepository userRepository;
	private final UserService userService;
	private final StripeService stripeService;
	private static final Logger logger = LoggerFactory.getLogger(UserController.class);

	@Autowired
	public UserController(UserRepository userRepository, UserService userService, StripeService stripeService) {
		this.userRepository = userRepository;
		this.userService = userService;
		this.stripeService = stripeService;
	}

	// ユーザー情報ページの表示
	@GetMapping
	public String index(@AuthenticationPrincipal UserDetailsImpl userDetailsImpl, Model model) {
		logger.info("index method called"); // ログを追加
		User user = userRepository.getReferenceById(userDetailsImpl.getUser().getId());
		model.addAttribute("user", user);
		return "user/index";
	}

	// ユーザー情報編集ページの表示
	@GetMapping("/edit")
	public String edit(@AuthenticationPrincipal UserDetailsImpl userDetailsImpl, Model model) {
		logger.info("edit method called"); // ログを追加
		User user = userRepository.getReferenceById(userDetailsImpl.getUser().getId());
		UserEditForm userEditForm = new UserEditForm(user.getId(), user.getName(), user.getFurigana(),
				user.getPostalCode(), user.getAddress(), user.getPhoneNumber(), user.getEmail());
		model.addAttribute("userEditForm", userEditForm);
		return "user/edit";
	}

	// ユーザー情報の更新
	@PostMapping("/update")
	public String update(@ModelAttribute @Validated UserEditForm userEditForm, BindingResult bindingResult,
			RedirectAttributes redirectAttributes) {
		logger.info("update method called"); // ログを追加

		// メールアドレスが変更されているか確認
		if (userService.isEmailChanged(userEditForm) && userService.isEmailRegistered(userEditForm.getEmail())) {
			FieldError fieldError = new FieldError(bindingResult.getObjectName(), "email", "すでに登録済みのメールアドレスです。");
			bindingResult.addError(fieldError);
		}

		if (bindingResult.hasErrors()) {
			return "user/edit";
		}

		userService.update(userEditForm);
		redirectAttributes.addFlashAttribute("successMessage", "会員情報を編集しました。");
		return "redirect:/user";
	}

	// 有料会員への登録処理
	@PostMapping("/subscribe")
	public String subscribeToPremium(@AuthenticationPrincipal UserDetailsImpl userDetailsImpl,
			HttpServletRequest request) {
		logger.info("subscribeToPremium method called"); // ログを追加
		User user = userRepository.getReferenceById(userDetailsImpl.getUser().getId());
		String checkoutUrl = stripeService.createSubscriptionSession(request, user.getEmail());
		return "redirect:" + checkoutUrl;
	}

	// クレジットカード情報更新フォームの表示
	@GetMapping("/update-card")
	public String showUpdateCardForm(Model model) {
		logger.info("showUpdateCardForm method called"); // ログを追加
		return "user/update-card"; // クレジットカード情報の更新フォームページ
	}

	// クレジットカード情報の更新
	@PostMapping("/update-card")
	public String updateCreditCard(@RequestBody Map<String, String> payload,
			@AuthenticationPrincipal UserDetailsImpl userDetailsImpl,
			RedirectAttributes redirectAttributes) {
		logger.info("updateCreditCard method called"); // ログを追加
		try {
			String paymentMethodId = payload.get("paymentMethodId");
			User user = userDetailsImpl.getUser();
			userService.updateCreditCard(user.getId(), paymentMethodId);
			redirectAttributes.addFlashAttribute("successMessage", "クレジットカード情報が更新されました。");
			return "redirect:/user";
		} catch (Exception e) {
			logger.error("Error updating credit card", e); // エラーログを追加
			redirectAttributes.addFlashAttribute("errorMessage", "カード情報の更新に失敗しました。");
			return "redirect:/user/update-card";
		}
	}

	// ユーザーの詳細情報とクレジットカード情報の取得
	@GetMapping("/details")
	public String getUserDetails(@AuthenticationPrincipal UserDetailsImpl userDetailsImpl, Model model) {
	    logger.info("getUserDetails method called"); // ログを追加
	    User user = userDetailsImpl.getUser();
	    model.addAttribute("user", user);

	    // 有料会員の場合、Stripeからクレジットカード情報を取得して表示する
	    if (user.isPremiumMember()) {
	        try {
	            logger.info("Retrieving card details for customer: {}", user.getStripeCustomerId());
	            Map<String, String> cardDetails = stripeService.getCreditCardInfo(user.getStripeCustomerId());
	            if (cardDetails == null || cardDetails.isEmpty()) {
	                logger.warn("No card details found for customer: {}", user.getStripeCustomerId());
	                model.addAttribute("errorMessage", "クレジットカード情報が見つかりませんでした。");
	            } else {
	                logger.info("Card Details: {}", cardDetails);
	                model.addAttribute("cardDetails", cardDetails);
	            }
	        } catch (Exception e) {
	            logger.error("Error retrieving card details for customer: {}", user.getStripeCustomerId(), e);
	            model.addAttribute("errorMessage", "クレジットカード情報の取得に失敗しました。");
	        }
	    }
	    return "user/index";
	}
}